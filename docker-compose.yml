version: '3.5'
services:
  mysql-write:
    image: mysql:8.0.37
    platform: linux/x86_64
    container_name: spring-boot-template-write-mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=10a10a
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    # volumes:
    #   - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3306:3306"
    networks:
      - spring-boot-template
  mysql-read:
    image: mysql:8.0.37
    platform: linux/x86_64
    container_name: spring-boot-template-read-mysql
    restart: always
    environment:
      - MYSQL_ROOT_PASSWORD=10a10a
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    # volumes:
    #   - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3307:3306"
    networks:
      - spring-boot-template

  mongodb:
    image: mongo:4.4
    restart: always
    platform: linux/x86_64
    container_name: spring-boot-template-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 10a10a
    ports:
      - "27017:27017"
    networks:
      - spring-boot-template

  zookeeper:
    image: wurstmeister/zookeeper
    platform: linux/x86_64
    container_name: spring-boot-template-zookeeper
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:2.12-2.5.0
    container_name: spring-boot-template-kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  redis_master:
    container_name: spring-boot-template-redis-master
    image: redis
    ports:
      - "6379:6379"
    networks:
      - spring-boot-template
  redis_slave-a:
    container_name: spring-boot-template-redis-slave-a
    image: redis
    ports:
      - "6380:6379"
    volumes:
      - ./redis:/usr/local/etc/redis/
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - spring-boot-template
  redis_slave-b:
    container_name: spring-boot-template-redis-slave-b
    image: redis
    ports:
      - "6381:6379"
    volumes:
      - ./redis:/usr/local/etc/redis/
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - spring-boot-template
#   axonserver:
#     image: axoniq/axonserver:latest-dev
#     hostname: axonserver
#     volumes:
#       - axonserver-data:/axonserver/data
#       - axonserver-events:/axonserver/eventdata
#       - axonserver-config:/axonserver/config:ro
#     ports:
#       - '8024:8024'
#       - '8124:8124'
#     networks:
#       - spring-boot-template

# volumes:
#   axonserver-data:
#     driver: local
#     driver_opts:
#       type: none
#       device: ${PWD}/axon-server-se/data
#       o: bind
#   axonserver-events:
#     driver: local
#     driver_opts:
#       type: none
#       device: ${PWD}/axon-server-se/events
#       o: bind
#   axonserver-config:
#     driver: local
#     driver_opts:
#       type: none
#       device: ${PWD}/axon-server-se/config
#       o: bind

networks:
  spring-boot-template:
  # auth-service:
  #   image: tripple/auth-service
  #   build:
  #     context: ./auth-service
  #     dockerfile: ./Dockerfile
  #   container_name: tripple-auth-service
  #   expose:
  #     - "6100"
  #   ports:
  #     - "6100:6100"
  #   depends_on:
  #     - mysql
  #   networks:
  #     - tripple-net

  # place-service:
  #   image: tripple/place-service
  #   build:
  #     context: ./place-service
  #     dockerfile: ./Dockerfile
  #   container_name: tripple-place-service
  #   expose:
  #     - "6200"
  #   ports:
  #     - "6200:6200"
  #   depends_on:
  #     - mysql
  #   networks:
  #     - tripple-net

  # review-service:
  #   image: tripple/review-service
  #   build:
  #     context: ./review-service
  #     dockerfile: ./Dockerfile
  #   container_name: tripple-review-service
  #   expose:
  #     - "6300"
  #   ports:
  #     - "6300:6300"
  #   depends_on:
  #     - mysql
  #   networks:
  #     - tripple-net

  # point-service:
  #   image: tripple/point-service
  #   build:
  #     context: ./point-service
  #     dockerfile: ./Dockerfile
  #   container_name: tripple-point-service
  #   expose:
  #     - "6400"
  #   ports:
  #     - "6400:6400"
  #   depends_on:
  #     - mysql
  #   networks:
  #     - tripple-net

  # api-gateway:
  #   image: nginx:latest
  #   volumes:
  #     - ./api-gateway/nginx.conf:/etc/nginx/nginx.conf
  #   container_name: tripple-api-gateway
  #   expose:
  #     - "6900"
  #   ports:
  #     - "6900:6900"
  #   depends_on:
  #     - auth-service
  #     - place-service
  #     - review-service
  #     - point-service
  #   networks:
  #     - tripple-net%